#
# Copyright (C) 2007 Arnold Krille
# Copyright (C) 2007 Pieter Palmers
# Copyright (C) 2008 Marc-Olivier Barre
#
# This file originates from FFADO (www.ffado.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import glob
from string import Template

Import('env')

# Define the library suffix for POSIX like systems
if env['PLATFORM'] == 'posix':
    env.AppendUnique(SHLIBSUFFIX='.' + env['JACK_VERSION'])

# Paths where include files can be found
env.AppendUnique(CPPPATH=['#/', '#/common', '#/common/jack'])

# Needed libraries
env.AppendUnique(LIBS=['rt', 'pthread'])

# HACK: this should not be here ideally
env.AppendUnique(CPPPATH=['#/linux','#/macosx'])

# A symlinking command for our libraries' names
symlinkcmd = 'rm -f $TARGET;ln -nsf $SOURCE.name $TARGET'

#
# Source files section
#

srcfiles_common_serverlib = [
    'JackActivationCount.cpp',
    'JackAPI.cpp',
    'JackAudioDriver.cpp',
    'JackClient.cpp',
    'JackConnectionManager.cpp',
    'JackDriver.cpp',
    'JackEngine.cpp',
    'JackEngineControl.cpp',
    'JackError.c',
    'JackExternalClient.cpp',
    'JackFrameTimer.cpp',
    'JackFreewheelDriver.cpp',
    'JackGlobalsServer.cpp',
    'JackGraphManager.cpp',
    'JackInternalClient.cpp',
    'JackPort.cpp',
    'JackPosixSemaphore.cpp',
    'JackPosixThread.cpp',
    'JackFifo.cpp',
    'JackLoopbackDriver.cpp',
    'JackPortType.cpp',
    'JackAudioPort.cpp',
    'JackMidiPort.cpp',
    'JackMidiAPI.cpp',
    'JackServer.cpp',
    'JackShmMem.cpp',
    'JackThreadedDriver.cpp',
    'shm.c',
    'JackSocket.cpp',
    'JackSocketServerChannel.cpp',
    'JackSocketNotifyChannel.cpp',
    'JackSocketServerNotifyChannel.cpp',
    'JackTime.c',
    'JackServerAPI.cpp',
    'JackGlobals.cpp',
    'JackDriverLoader.cpp',
    'JackDebugClient.cpp',
    'JackTransportEngine.cpp',
    'JackServerGlobals.cpp',
    'JackServerLaunch.cpp',
    'timestamps.c',
    'JackTools.cpp',
    'ringbuffer.c'
    ]

srcfiles_common_clientlib = [
    'JackActivationCount.cpp',
    'JackAPI.cpp',
    'JackClient.cpp',
    'JackConnectionManager.cpp',
    'ringbuffer.c',
    'JackServerLaunch.cpp',
    'JackError.c',
    'JackFrameTimer.cpp',
    'JackGlobalsClient.cpp',
    'JackGraphManager.cpp',
    'JackLibClient.cpp',
    'JackLibAPI.cpp',
    'JackPort.cpp',
    'JackPosixSemaphore.cpp',
    'JackFifo.cpp',
    'JackPortType.cpp',
    'JackAudioPort.cpp',
    'JackMidiPort.cpp',
    'JackMidiAPI.cpp',
    'JackEngineControl.cpp',
    'JackPosixThread.cpp',
    'JackShmMem.cpp',
    'shm.c',
    'JackSocket.cpp',
    'JackSocketClientChannel.cpp',
    'JackTime.c',
    'JackGlobals.cpp',
    'JackDebugClient.cpp',
    'JackTransportEngine.cpp',
    'timestamps.c',
    'JackTools.cpp'
    ]

if not env['FULL_MIMIC']:
    srcfiles_common_wrapperlib = [
        'JackAPIWrapper.cpp',
        'ringbuffer.c'
        ]

jack_headers = [
    'intclient.h',
    'jack.h',
    'midiport.h',
    'ringbuffer.h',
    'statistics.h',
    'thread.h',
    'transport.h',
    'types.h'
    ]

#
# Build/install section
#

# Libraries
clientlib = env.SharedLibrary(env['CLIENTLIB'], srcfiles_common_clientlib)
serverlib = env.SharedLibrary(env['SERVERLIB'], srcfiles_common_serverlib)
env.Install( env['LIBDIR'], [clientlib, serverlib])
if not env['FULL_MIMIC']:
    wrapperlib = env.SharedLibrary(env['WRAPPERLIB'], srcfiles_common_wrapperlib)
    env.Install( env['LIBDIR'], [wrapperlib])
env.Alias('install', env['LIBDIR'])

# Handle the way we name libraries on a POSIX system
# TODO: this is not quite clean yet. changing the library version is a pain we'll need a nicer loop and a config value somewhere
if env['PLATFORM'] == 'posix':
    libs = [(env['CLIENTLIB'], clientlib), (env['SERVERLIB'], serverlib)]
    if not env['FULL_MIMIC']:
        libs.append((env['WRAPPERLIB'], wrapperlib))
	# When we use the wrapper, we want symlinks named libjack.so[.0] so regular clients can use it as a proxy
	# this will delete the 2 links installed by jack-1
	# if jackd if running and not jackdmp, jack-1 libs will be used (hopefully...)
	env.Command('#/common/libjack.so.0', '#/common/lib' + env['CLIENTLIB'] + '.so.' + env['JACK_VERSION'], symlinkcmd)
	env.Command('#/common/libjack.so', '#/common/libjack.so.0', symlinkcmd)
    for lib_name, lib in libs:
        if lib_name != 'jack':
	    env.Command('#/common/lib' + lib_name + '.so.' + str(env['JACK_MAJOR_VERSION']), lib, symlinkcmd)
	    env.Command('#/common/lib' + lib_name + '.so', '#/common/lib' + lib_name + '.so.' + str(env['JACK_MAJOR_VERSION']), symlinkcmd)
        env.Command(env['LIBDIR']  + '/lib' + lib_name + '.so.' + str(env['JACK_MAJOR_VERSION']), env['LIBDIR'] + '/lib' + lib_name + '.so.' + env['JACK_VERSION'], symlinkcmd)
        env.Command(env['LIBDIR']  + '/lib' + lib_name + '.so', env['LIBDIR'] + '/lib' + lib_name + '.so.' + str(env['JACK_MAJOR_VERSION']), symlinkcmd)
        env.Alias('install', env['LIBDIR']  + '/lib' + lib_name + '.so.' + str(env['JACK_MAJOR_VERSION']))

# Headers
for header in jack_headers:
    env.Install(env['INCLUDEDIR'] + '/jack', 'jack/' + header)
    env.Alias('install', env['INCLUDEDIR'])
